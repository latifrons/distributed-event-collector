// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/report.proto

package dec

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReportRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportRequestMultiError, or
// nil if none found.
func (m *ReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	// no validation rules for EventType

	if len(errors) > 0 {
		return ReportRequestMultiError(errors)
	}

	return nil
}

// ReportRequestMultiError is an error wrapping multiple validation errors
// returned by ReportRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportRequestMultiError) AllErrors() []error { return m }

// ReportRequestValidationError is the validation error returned by
// ReportRequest.Validate if the designated constraints aren't met.
type ReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportRequestValidationError) ErrorName() string { return "ReportRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportRequestValidationError{}

// Validate checks the field values on ReportResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportResponseMultiError,
// or nil if none found.
func (m *ReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportResponseMultiError(errors)
	}

	return nil
}

// ReportResponseMultiError is an error wrapping multiple validation errors
// returned by ReportResponse.ValidateAll() if the designated constraints
// aren't met.
type ReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportResponseMultiError) AllErrors() []error { return m }

// ReportResponseValidationError is the validation error returned by
// ReportResponse.Validate if the designated constraints aren't met.
type ReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportResponseValidationError) ErrorName() string { return "ReportResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportResponseValidationError{}

// Validate checks the field values on GetEventFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventFlowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventFlowRequestMultiError, or nil if none found.
func (m *GetEventFlowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventFlowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	if len(errors) > 0 {
		return GetEventFlowRequestMultiError(errors)
	}

	return nil
}

// GetEventFlowRequestMultiError is an error wrapping multiple validation
// errors returned by GetEventFlowRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEventFlowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventFlowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventFlowRequestMultiError) AllErrors() []error { return m }

// GetEventFlowRequestValidationError is the validation error returned by
// GetEventFlowRequest.Validate if the designated constraints aren't met.
type GetEventFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventFlowRequestValidationError) ErrorName() string {
	return "GetEventFlowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventFlowRequestValidationError{}

// Validate checks the field values on GetEventFlowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventFlowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventFlowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventFlowResponseMultiError, or nil if none found.
func (m *GetEventFlowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventFlowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventFlowList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventFlowResponseValidationError{
						field:  fmt.Sprintf("EventFlowList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventFlowResponseValidationError{
						field:  fmt.Sprintf("EventFlowList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventFlowResponseValidationError{
					field:  fmt.Sprintf("EventFlowList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEventFlowResponseMultiError(errors)
	}

	return nil
}

// GetEventFlowResponseMultiError is an error wrapping multiple validation
// errors returned by GetEventFlowResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEventFlowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventFlowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventFlowResponseMultiError) AllErrors() []error { return m }

// GetEventFlowResponseValidationError is the validation error returned by
// GetEventFlowResponse.Validate if the designated constraints aren't met.
type GetEventFlowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventFlowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventFlowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventFlowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventFlowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventFlowResponseValidationError) ErrorName() string {
	return "GetEventFlowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventFlowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventFlowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventFlowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventFlowResponseValidationError{}

// Validate checks the field values on EventFlow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventFlow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventFlow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventFlowMultiError, or nil
// if none found.
func (m *EventFlow) ValidateAll() error {
	return m.validate(true)
}

func (m *EventFlow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for TimestampNano

	if len(errors) > 0 {
		return EventFlowMultiError(errors)
	}

	return nil
}

// EventFlowMultiError is an error wrapping multiple validation errors returned
// by EventFlow.ValidateAll() if the designated constraints aren't met.
type EventFlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventFlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventFlowMultiError) AllErrors() []error { return m }

// EventFlowValidationError is the validation error returned by
// EventFlow.Validate if the designated constraints aren't met.
type EventFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventFlowValidationError) ErrorName() string { return "EventFlowValidationError" }

// Error satisfies the builtin error interface
func (e EventFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventFlowValidationError{}

// Validate checks the field values on GetEventStatisticsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventStatisticsRequestMultiError, or nil if none found.
func (m *GetEventStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Samples

	if len(errors) > 0 {
		return GetEventStatisticsRequestMultiError(errors)
	}

	return nil
}

// GetEventStatisticsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEventStatisticsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetEventStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventStatisticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventStatisticsRequestMultiError) AllErrors() []error { return m }

// GetEventStatisticsRequestValidationError is the validation error returned by
// GetEventStatisticsRequest.Validate if the designated constraints aren't met.
type GetEventStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStatisticsRequestValidationError) ErrorName() string {
	return "GetEventStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStatisticsRequestValidationError{}

// Validate checks the field values on GetEventStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventStatisticsResponseMultiError, or nil if none found.
func (m *GetEventStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventStatisticList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventStatisticsResponseValidationError{
						field:  fmt.Sprintf("EventStatisticList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventStatisticsResponseValidationError{
						field:  fmt.Sprintf("EventStatisticList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventStatisticsResponseValidationError{
					field:  fmt.Sprintf("EventStatisticList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEventStatisticsResponseMultiError(errors)
	}

	return nil
}

// GetEventStatisticsResponseMultiError is an error wrapping multiple
// validation errors returned by GetEventStatisticsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetEventStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventStatisticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventStatisticsResponseMultiError) AllErrors() []error { return m }

// GetEventStatisticsResponseValidationError is the validation error returned
// by GetEventStatisticsResponse.Validate if the designated constraints aren't met.
type GetEventStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStatisticsResponseValidationError) ErrorName() string {
	return "GetEventStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStatisticsResponseValidationError{}

// Validate checks the field values on EventStatistic with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventStatistic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventStatistic with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventStatisticMultiError,
// or nil if none found.
func (m *EventStatistic) ValidateAll() error {
	return m.validate(true)
}

func (m *EventStatistic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for SumTimeNano

	// no validation rules for Count

	if len(errors) > 0 {
		return EventStatisticMultiError(errors)
	}

	return nil
}

// EventStatisticMultiError is an error wrapping multiple validation errors
// returned by EventStatistic.ValidateAll() if the designated constraints
// aren't met.
type EventStatisticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventStatisticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventStatisticMultiError) AllErrors() []error { return m }

// EventStatisticValidationError is the validation error returned by
// EventStatistic.Validate if the designated constraints aren't met.
type EventStatisticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventStatisticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventStatisticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventStatisticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventStatisticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventStatisticValidationError) ErrorName() string { return "EventStatisticValidationError" }

// Error satisfies the builtin error interface
func (e EventStatisticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventStatistic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventStatisticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventStatisticValidationError{}
